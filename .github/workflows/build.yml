name: Go

on:
  schedule:
    - cron: '0 0 * * *'
  push:
  workflow_dispatch:
    inputs:
      tbBranch:
        description: 'TDengine branch'
        required: true
        type: string

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-24.04
    outputs:
      commit_id: ${{ steps.get_commit_id.outputs.commit_id }}
    steps:
      - name: checkout TDengine by push
        if: github.event_name == 'push' || github.event_name == 'schedule'
        uses: actions/checkout@v4
        with:
          repository: 'taosdata/TDengine'
          path: 'TDengine'
          ref: main
      
      - name: checkout TDengine manually
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          repository: 'taosdata/TDengine'
          path: 'TDengine'
          ref: ${{ inputs.tbBranch }}

      - name: get_commit_id
        id: get_commit_id
        run: |
          cd TDengine
          echo "commit_id=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Get CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.31.6

      - name: Cache externals built
        uses: actions/cache@v4
        id: cache-ext
        with:
          path: TDengine/.externals
          key: ${{ runner.os }}--${{ hashFiles('TDengine/cmake/external.cmake', 'cmake/in/**') }}-build-ext-v3

      - name: Cmake TDengine
        run: |
          cd TDengine
          mkdir debug && cd debug
          cmake .. -DBUILD_DEPENDENCY_TESTS=false

      - name: Make TDengine
        run: |
          cd TDengine/debug/
          make -j8
      
      - name: package
        run: |
          mkdir -p ./release
          cp ./TDengine/debug/build/bin/taos ./release/
          cp ./TDengine/debug/build/bin/taosd ./release/
          cp ./TDengine/debug/build/lib/libtaosnative.so ./release/
          cp ./TDengine/include/client/taos.h ./release/
          cp ./TDengine/debug/build/lib/libtaos.so ./release/
          cat >./release/install.sh<<EOF 
          chmod +x ./taos
          chmod +x ./taosd
          cp ./taos /bin/
          cp ./taosd /bin/
          cp ./libtaosnative.so /usr/lib
          cp ./libtaos.so /usr/lib
          cp ./taos.h /usr/include
          EOF
          tar -zcvf server.tar.gz ./release
      - name: cache build
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ steps.get_commit_id.outputs.commit_id }}
      

  test:
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: get cache server
        id: get-cache-server-pr
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: install
        run: |
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh
  
      - name: start shell
        run: |
          cat >start.sh<<EOF
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: start taosd
        run: nohup sudo sh ./start.sh & disown
      
      - name: checkout
        uses: actions/checkout@v4
        with:
          path: 'tests'
      
      - name: build tests
        run: |
          cd tests
          mkdir debug && cd debug
          cmake ..
          make -j8

      - name: get result file name
        id: get_result_file_name
        run: |
          echo "result_file_name=result_$(date "+%Y%m%d_%H%M%S").csv" >> $GITHUB_OUTPUT

      - name: run tests
        run: |
          cd tests/tests
          taos -s "create database test WAL_RETENTION_PERIOD 0"
          sleep 5
          taos -s "create table if not exists test.all_type(ts timestamp,c1 bool,c2 tinyint,c3 smallint,c4 int,c5 bigint,c6 tinyint unsigned,c7 smallint unsigned,c8 int unsigned,c9 bigint unsigned,c10 float,c11 double,c12 binary(20),c13 nchar(20))tags(tts timestamp,tc1 bool,tc2 tinyint,tc3 smallint,tc4 int,tc5 bigint,tc6 tinyint unsigned,tc7 smallint unsigned,tc8 int unsigned,tc9 bigint unsigned,tc10 float,tc11 double,tc12 binary(20),tc13 nchar(20))"
          pip install psutil
          python3 -u monitor.py --result_file_name ${{ steps.get_result_file_name.outputs.result_file_name }}
          tree ../dist

      - name: push dist
        run: |
          cd tests
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull
          index_file="dist/data/index.csv"
          time_str=$(date "+%Y-%m-%d %H:%M:%S")
          output_file_name="${{ steps.get_result_file_name.outputs.result_file_name }}"
          if [ ! -f "$index_file" ] || [ ! -s "$index_file" ]; then
              echo "ts,filename" > "$index_file"
          fi
          echo "$time_str,$output_file_name" >> "$index_file"
          git add -f dist/data
          git commit -m "Auto-update test files"
          git push
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './tests/dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
